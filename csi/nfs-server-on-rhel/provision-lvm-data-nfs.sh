#!/usr/bin/env bash
###############################################################
# Create LVM-based data store for NFS export on a RHEL8+ host
# - Idempotent
###############################################################
[[ $(whoami) == 'root' ]] || {
    echo "❌  ERR : Must RUN AS root"
    
    exit 11
}


lvmCreate(){
    # Create LVM-based store on (raw) block device

    blk=sdb
    dev=/dev/$blk
    pv=${dev}1
    vg=data
    lv=nfs1

    # Abort if block device does not exist
    lsblk -ndo NAME,SIZE,TYPE,MODEL |grep -q "\b$blk\b" || {
        echo "❌  ERR $? : Block device '$blk' does not exist"

        return 11
    }

    # Abort if PV is mounted
    mount |grep -q $pv && {
        echo "❌  ERR $? : PV '$pv' is mounted."

        return  22
    }

    # 0. Partition device if not already
    isParted(){ lsblk -no TYPE "$pv" 2>/dev/null |grep -q part; }
    isParted || {
        parted -s $dev mklabel gpt
        parted -s $dev mkpart pv 1MiB 100%
        parted -s $dev set 1 lvm on
        partprobe "$dev"
        # Allow udev to catch up
        while ! isParted; do sleep 1 >/dev/null; done 
        udevadm settle
    }

    # 1. Create PV if not already
    pvs "$pv" 2>/dev/null ||
        pvcreate $pv

    # 2. Create VG if not already
    vgs "$vg" 2>/dev/null ||
        vgcreate "$vg" "$pv"

    # 3. Create LV if not already
    lvs "$vg/$lv" 2>/dev/null ||
        lvcreate -n "$lv" -l 100%FREE "$vg"

    # 4. Format with XFS if not already
    blkid "/dev/$vg/$lv" 2>/dev/null |grep -q 'TYPE="xfs"' ||
        mkfs.xfs /dev/$vg/$lv

}
lvmCreate || exit $?

lvmMount(){

    export=/srv/nfs/k8s
    user=nfsanon
    group=ad-nfsanon

    # 1. Create mount point and mount ephemerally if not already
    mkdir -p $export &&
        mount |grep $export >/dev/null 2>&1 || {
            mount /dev/$vg/$lv $export || {
                echo "❌  ERR : FAIL @ mount /dev/$vg/$lv $export"

                return 22
            }
        }

    # 2. Set proper SELinux fcontext for R/W access at container mounts, if applicable.
    command -v getenforce >/dev/null 2>&1 &&
        semanage fcontext -a -t public_content_rw_t "${export}(/.*)?" &&
            restorecon -Rv "$export"

    ## Persist

    # 3. Get UUID
    blkid="$(blkid /dev/$vg/$lv |cut -d' ' -f2 |cut -d'=' -f2 |sed 's/"//g')"
    [[ $blkid ]] || {
        echo "❌  ERR : FAIL @ blkid /dev/$vg/$lv"

        return 33
    }

    # 4. Append to /etc/fstab (once)
	grep "$blkid" /etc/fstab >/dev/null 2>&1 || tee -a /etc/fstab <<-EOH
	UUID=$blkid $export xfs defaults 0 0
	EOH

    # 5. Apply changes to the systemd unit file (.mount) generated by systemd-fstab-generator
    svc=${export////-}.mount
    svc=${svc:1}
    systemctl daemon-reload &&
        systemctl is-active $svc || {
            echo "❌  ERR : systemctl : $svc"
            systemctl cat $svc

            return 44
        }

    # 6. Mount (and initialize if ready)
    mount -a &&
        getent group $group 2>/dev/null &&
            id $user 2>/dev/null &&
                chown -R "$user:$group" "$export"
    
    ls -hal $export
}
lvmMount || exit $?

lvmTeardown(){
    blk=sdb
    dev=/dev/$blk
    pv=${dev}1
    vg=data
    lv=nfs1
    #mnt=/srv/nfs/k8s

    # Abort if block device does not exist
    lsblk -ndo NAME,SIZE,TYPE,MODEL |grep -q "\b$blk\b" || {
        echo "❌  ERR $? : Block device '$blk' does not exist"

        return 11
    }

    # Abort if PV is mounted
    mount |grep -q $pv && {
        echo "❌  ERR $? : PV '$pv' is mounted."

        return  22
    }

    # 1. Unmount the LV
    #umount $mnt 2>/dev/null || true

    # 2. Disable swap, else no-op, then deactivate LV
        # How to check for swaps
        #cat /proc/swaps
        #swapon --summary
    swapoff /dev/$vg/$lv 2>/dev/null || true
    lvchange -an /dev/$vg/$lv

    # 3. Delete the Logical Volume
    lvremove -y /dev/$vg/$lv

    # 4. Remove the Volume Group
    vgremove -y $vg

    # 5. Remove the Physical Volume
    pvremove $pv

    # 6. Wipe filesystem signatures and partition table
    wipefs -a $pv
    wipefs -a $dev 

    # 7. Zap partition table completely (optional and destructive)
    sgdisk --zap-all $dev
    partprobe $dev

    # Validate : Want no trace of that LVM construct
    lsblk $dev
    pvs; vgs; lvs
    blkid
}